// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`API snapshots Api of DexV3Contract 1`] = `
{
  "contractName": "DexV3Contract",
  "contractVersion": "?.?.?",
  "methods": [
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "amount0Desired": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "amount0Min": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "amount1Desired": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "amount1Min": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "positionId": {
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "tickLower": {
            "minLength": 1,
            "minimum": -887272,
            "type": "string",
          },
          "tickUpper": {
            "maximum": 887272,
            "minLength": 1,
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
          "tickUpper",
          "tickLower",
          "amount0Desired",
          "amount1Desired",
          "amount0Min",
          "amount1Min",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "AddLiquidity",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "amounts": {
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
              "poolAlias": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "poolFee": {
                "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
                "enum": [
                  10000,
                  3000,
                  500,
                ],
                "type": "number",
              },
              "poolHash": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
              "userAddress": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "userBalanceDelta": {
                "properties": {
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "token0Balance": {
                    "minLength": 1,
                    "properties": {
                      "additionalKey": {
                        "not": {
                          "type": "null",
                        },
                      },
                      "category": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "collection": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "inUseHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "instanceIds": {},
                      "lockedHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "owner": {
                        "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                        "type": "string",
                      },
                      "quantity": {
                        "description": "Number provided as a string.",
                        "type": "string",
                      },
                      "type": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "vestingPeriodStart": {
                        "description": "vestingPeriodStart timestamp. For Vesting Locks, this specifies the beginning of the vesting period.",
                        "minimum": 0,
                        "type": "number",
                      },
                    },
                    "required": [
                      "owner",
                      "collection",
                      "category",
                      "type",
                      "additionalKey",
                      "quantity",
                    ],
                    "type": "object",
                  },
                  "token1Balance": {
                    "minLength": 1,
                    "properties": {
                      "additionalKey": {
                        "not": {
                          "type": "null",
                        },
                      },
                      "category": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "collection": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "inUseHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "instanceIds": {},
                      "lockedHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "owner": {
                        "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                        "type": "string",
                      },
                      "quantity": {
                        "description": "Number provided as a string.",
                        "type": "string",
                      },
                      "type": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "vestingPeriodStart": {
                        "description": "vestingPeriodStart timestamp. For Vesting Locks, this specifies the beginning of the vesting period.",
                        "minimum": 0,
                        "type": "number",
                      },
                    },
                    "required": [
                      "owner",
                      "collection",
                      "category",
                      "type",
                      "additionalKey",
                      "quantity",
                    ],
                    "type": "object",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "token0Balance",
                  "token1Balance",
                ],
                "type": "object",
              },
            },
            "required": [
              "userBalanceDelta",
              "amounts",
              "poolHash",
              "poolAlias",
              "poolFee",
              "userAddress",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": "Evaluate a batch of transactions Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "operations": {
            "items": {
              "properties": {
                "dto": {
                  "minLength": 1,
                  "properties": {
                    "prefix": {
                      "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signature": {
                      "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerAddress": {
                      "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerPublicKey": {
                      "description": "Public key of the user who signed the DTO.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signing": {
                      "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                      "enum": [
                        "ETH",
                        "TON",
                      ],
                      "type": "string",
                    },
                    "uniqueKey": {
                      "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                      "minLength": 1,
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "method": {
                  "minLength": 1,
                  "type": "string",
                },
                "prefix": {
                  "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                  "minLength": 1,
                  "type": "string",
                },
                "signature": {
                  "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                  "minLength": 1,
                  "type": "string",
                },
                "signerAddress": {
                  "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                  "minLength": 1,
                  "type": "string",
                },
                "signerPublicKey": {
                  "description": "Public key of the user who signed the DTO.",
                  "minLength": 1,
                  "type": "string",
                },
                "signing": {
                  "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                  "enum": [
                    "ETH",
                    "TON",
                  ],
                  "type": "string",
                },
                "uniqueKey": {
                  "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                  "minLength": 1,
                  "type": "string",
                },
              },
              "required": [
                "method",
                "dto",
              ],
              "type": "object",
            },
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "writesLimit": {
            "description": "Soft limit of keys written to chain in a batch, excluding deletes. If the limit is exceeded, all subsequent operations in batch fail. Typically it is safe to repeat failed operations in the next batch. Default: 10000. Max: 100000.",
            "maximum": 100000,
            "minimum": 1,
            "type": "number",
          },
        },
        "required": [
          "operations",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "BatchEvaluate",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": "Submit a batch of transactionsSubmit a batch of transactions Allowed roles: SUBMIT. Allowed orgs: CuratorOrg.",
      "dtoSchema": {
        "properties": {
          "operations": {
            "items": {
              "properties": {
                "dto": {
                  "minLength": 1,
                  "properties": {
                    "prefix": {
                      "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signature": {
                      "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerAddress": {
                      "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signerPublicKey": {
                      "description": "Public key of the user who signed the DTO.",
                      "minLength": 1,
                      "type": "string",
                    },
                    "signing": {
                      "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                      "enum": [
                        "ETH",
                        "TON",
                      ],
                      "type": "string",
                    },
                    "uniqueKey": {
                      "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                      "minLength": 1,
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
                "method": {
                  "minLength": 1,
                  "type": "string",
                },
                "prefix": {
                  "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                  "minLength": 1,
                  "type": "string",
                },
                "signature": {
                  "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                  "minLength": 1,
                  "type": "string",
                },
                "signerAddress": {
                  "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                  "minLength": 1,
                  "type": "string",
                },
                "signerPublicKey": {
                  "description": "Public key of the user who signed the DTO.",
                  "minLength": 1,
                  "type": "string",
                },
                "signing": {
                  "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                  "enum": [
                    "ETH",
                    "TON",
                  ],
                  "type": "string",
                },
                "uniqueKey": {
                  "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                  "minLength": 1,
                  "type": "string",
                },
              },
              "required": [
                "method",
                "dto",
              ],
              "type": "object",
            },
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "writesLimit": {
            "description": "Soft limit of keys written to chain in a batch, excluding deletes. If the limit is exceeded, all subsequent operations in batch fail. Typically it is safe to repeat failed operations in the next batch. Default: 10000. Max: 100000.",
            "maximum": 100000,
            "minimum": 1,
            "type": "number",
          },
        },
        "required": [
          "operations",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "BatchSubmit",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "amount0Requested": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "amount1Requested": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "positionId": {
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "tickLower": {
            "minLength": 1,
            "minimum": -887272,
            "type": "string",
          },
          "tickUpper": {
            "maximum": 887272,
            "minLength": 1,
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
          "amount0Requested",
          "amount1Requested",
          "tickUpper",
          "tickLower",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "CollectPositionFees",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "amounts": {
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
              "poolAlias": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "poolFee": {
                "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
                "enum": [
                  10000,
                  3000,
                  500,
                ],
                "type": "number",
              },
              "poolHash": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
              "userAddress": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "userBalanceDelta": {
                "properties": {
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "token0Balance": {
                    "minLength": 1,
                    "properties": {
                      "additionalKey": {
                        "not": {
                          "type": "null",
                        },
                      },
                      "category": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "collection": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "inUseHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "instanceIds": {},
                      "lockedHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "owner": {
                        "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                        "type": "string",
                      },
                      "quantity": {
                        "description": "Number provided as a string.",
                        "type": "string",
                      },
                      "type": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "vestingPeriodStart": {
                        "description": "vestingPeriodStart timestamp. For Vesting Locks, this specifies the beginning of the vesting period.",
                        "minimum": 0,
                        "type": "number",
                      },
                    },
                    "required": [
                      "owner",
                      "collection",
                      "category",
                      "type",
                      "additionalKey",
                      "quantity",
                    ],
                    "type": "object",
                  },
                  "token1Balance": {
                    "minLength": 1,
                    "properties": {
                      "additionalKey": {
                        "not": {
                          "type": "null",
                        },
                      },
                      "category": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "collection": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "inUseHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "instanceIds": {},
                      "lockedHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "owner": {
                        "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                        "type": "string",
                      },
                      "quantity": {
                        "description": "Number provided as a string.",
                        "type": "string",
                      },
                      "type": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "vestingPeriodStart": {
                        "description": "vestingPeriodStart timestamp. For Vesting Locks, this specifies the beginning of the vesting period.",
                        "minimum": 0,
                        "type": "number",
                      },
                    },
                    "required": [
                      "owner",
                      "collection",
                      "category",
                      "type",
                      "additionalKey",
                      "quantity",
                    ],
                    "type": "object",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "token0Balance",
                  "token1Balance",
                ],
                "type": "object",
              },
            },
            "required": [
              "userBalanceDelta",
              "amounts",
              "poolHash",
              "poolAlias",
              "poolFee",
              "userAddress",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT. Allowed orgs: CuratorOrg.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "recepient": {
            "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
          "recepient",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "CollectProtocolFees",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "protocolFeesToken0": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "protocolFeesToken1": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "protocolFeesToken0",
              "protocolFeesToken1",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT. Allowed orgs: CuratorOrg.",
      "dtoSchema": {
        "properties": {
          "newAuthorities": {
            "items": {
              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
              "type": "string",
            },
            "minItems": 1,
            "type": "array",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "newAuthorities",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "ConfigureDexFeeAddress",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "authorities": {
                "items": {
                  "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                  "type": "string",
                },
                "minItems": 1,
                "type": "array",
              },
              "protocolFee": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
              },
            },
            "required": [
              "authorities",
              "protocolFee",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "initialSqrtPrice": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
          "initialSqrtPrice",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "CreatePool",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "poolAlias": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "poolFee": {
                "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
                "enum": [
                  10000,
                  3000,
                  500,
                ],
                "type": "number",
              },
              "poolHash": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "token0": {
                "description": "Object representing the chain identifier of token class.",
                "minLength": 1,
                "properties": {
                  "additionalKey": {
                    "not": {
                      "type": "null",
                    },
                  },
                  "category": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "collection": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "type": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "collection",
                  "category",
                  "type",
                  "additionalKey",
                ],
                "type": "object",
              },
              "token1": {
                "description": "Object representing the chain identifier of token class.",
                "minLength": 1,
                "properties": {
                  "additionalKey": {
                    "not": {
                      "type": "null",
                    },
                  },
                  "category": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "collection": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "type": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "collection",
                  "category",
                  "type",
                  "additionalKey",
                ],
                "type": "object",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "token0",
              "token1",
              "poolFee",
              "poolHash",
              "poolAlias",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "callerPublicKey": {
            "minLength": 1,
            "type": "string",
          },
          "dto": {
            "minLength": 1,
            "type": "string",
          },
          "method": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "method",
          "callerPublicKey",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "DryRun",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "amount": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "tickLower": {
            "minLength": 1,
            "minimum": -887272,
            "type": "string",
          },
          "tickUpper": {
            "maximum": 887272,
            "minLength": 1,
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "zeroForOne": {
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "amount",
          "tickUpper",
          "tickLower",
          "zeroForOne",
          "token0",
          "token1",
          "fee",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetAddLiquidityEstimation",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "amount0": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "amount1": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "liquidity": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "amount0",
              "amount1",
              "liquidity",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "deprecated": true,
      "description": "Gets the contract version. Deprecated. Use GetContractVersion instead. Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "isWrite": false,
      "methodName": "GetChaincodeVersion",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "string",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "isWrite": false,
      "methodName": "GetContractAPI",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "isWrite": false,
      "methodName": "GetContractVersion",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "string",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE. Allowed orgs: CuratorOrg.",
      "dtoSchema": {
        "properties": {
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetDexFeeConfigration",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "authorities": {
                "items": {
                  "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                  "type": "string",
                },
                "minItems": 1,
                "type": "array",
              },
              "protocolFee": {
                "maximum": 1,
                "minimum": 0,
                "type": "number",
              },
            },
            "required": [
              "authorities",
              "protocolFee",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetLiquidity",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "liquidity": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "liquidity",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "objectId": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "objectId",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetObjectByKey",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "objectId": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "objectId",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetObjectHistory",
      "responseSchema": {
        "properties": {
          "Data": {
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetPoolData",
      "responseSchema": {
        "properties": {
          "Data": {
            "description": "Decentralized exchange pool chain object with the core contract functionality.",
            "properties": {
              "bitmap": {
                "description": "An object where each key is a tick index and each value is a 256-bit binary string indicating which ticks are active.",
                "type": "object",
              },
              "fee": {
                "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
                "enum": [
                  10000,
                  3000,
                  500,
                ],
                "type": "number",
              },
              "feeGrowthGlobal0": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "feeGrowthGlobal1": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "grossPoolLiquidity": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "liquidity": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "maxLiquidityPerTick": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "protocolFees": {
                "type": "number",
              },
              "protocolFeesToken0": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "protocolFeesToken1": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "sqrtPrice": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "tickSpacing": {
                "type": "number",
              },
              "token0": {
                "type": "string",
              },
              "token0ClassKey": {
                "description": "Object representing the chain identifier of token class.",
                "properties": {
                  "additionalKey": {
                    "not": {
                      "type": "null",
                    },
                  },
                  "category": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "collection": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "type": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "collection",
                  "category",
                  "type",
                  "additionalKey",
                ],
                "type": "object",
              },
              "token1": {
                "type": "string",
              },
              "token1ClassKey": {
                "description": "Object representing the chain identifier of token class.",
                "properties": {
                  "additionalKey": {
                    "not": {
                      "type": "null",
                    },
                  },
                  "category": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "collection": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "type": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "collection",
                  "category",
                  "type",
                  "additionalKey",
                ],
                "type": "object",
              },
            },
            "required": [
              "token0",
              "token1",
              "fee",
              "token0ClassKey",
              "token1ClassKey",
              "bitmap",
              "sqrtPrice",
              "liquidity",
              "grossPoolLiquidity",
              "feeGrowthGlobal0",
              "feeGrowthGlobal1",
              "maxLiquidityPerTick",
              "tickSpacing",
              "protocolFees",
              "protocolFeesToken0",
              "protocolFeesToken1",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "poolHash": {
            "minLength": 1,
            "type": "string",
          },
          "positionId": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "tickLower": {
            "minimum": -887272,
            "type": "integer",
          },
          "tickUpper": {
            "maximum": 887272,
            "type": "integer",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "poolHash",
          "tickUpper",
          "tickLower",
          "positionId",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetPositionByID",
      "responseSchema": {
        "properties": {
          "Data": {
            "description": "Represents a liquidity position in a decentralized exchange (DEX) pool.Each position is associated with a unique NFT and defined by tick boundaries, liquidity amount, and fee tracking information.",
            "properties": {
              "fee": {
                "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
                "enum": [
                  10000,
                  3000,
                  500,
                ],
                "type": "number",
              },
              "feeGrowthInside0Last": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "feeGrowthInside1Last": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "liquidity": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "poolHash": {
                "minLength": 1,
                "type": "string",
              },
              "positionId": {
                "minLength": 1,
                "type": "string",
              },
              "tickLower": {
                "minimum": -887272,
                "type": "integer",
              },
              "tickUpper": {
                "maximum": 887272,
                "type": "integer",
              },
              "token0ClassKey": {
                "description": "Object representing the chain identifier of token class.",
                "properties": {
                  "additionalKey": {
                    "not": {
                      "type": "null",
                    },
                  },
                  "category": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "collection": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "type": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "collection",
                  "category",
                  "type",
                  "additionalKey",
                ],
                "type": "object",
              },
              "token1ClassKey": {
                "description": "Object representing the chain identifier of token class.",
                "properties": {
                  "additionalKey": {
                    "not": {
                      "type": "null",
                    },
                  },
                  "category": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "collection": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "type": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "collection",
                  "category",
                  "type",
                  "additionalKey",
                ],
                "type": "object",
              },
              "tokensOwed0": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "tokensOwed1": {
                "description": "Number provided as a string.",
                "type": "string",
              },
            },
            "required": [
              "poolHash",
              "tickUpper",
              "tickLower",
              "positionId",
              "liquidity",
              "feeGrowthInside0Last",
              "feeGrowthInside1Last",
              "tokensOwed0",
              "tokensOwed1",
              "token0ClassKey",
              "token1ClassKey",
              "fee",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "owner": {
            "minLength": 1,
            "type": "string",
          },
          "positionId": {
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "tickLower": {
            "minLength": 1,
            "minimum": -887272,
            "type": "string",
          },
          "tickUpper": {
            "maximum": 887272,
            "minLength": 1,
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
          "owner",
          "tickUpper",
          "tickLower",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetPositions",
      "responseSchema": {
        "properties": {
          "Data": {
            "description": "Represents a liquidity position in a decentralized exchange (DEX) pool.Each position is associated with a unique NFT and defined by tick boundaries, liquidity amount, and fee tracking information.",
            "properties": {
              "fee": {
                "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
                "enum": [
                  10000,
                  3000,
                  500,
                ],
                "type": "number",
              },
              "feeGrowthInside0Last": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "feeGrowthInside1Last": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "liquidity": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "poolHash": {
                "minLength": 1,
                "type": "string",
              },
              "positionId": {
                "minLength": 1,
                "type": "string",
              },
              "tickLower": {
                "minimum": -887272,
                "type": "integer",
              },
              "tickUpper": {
                "maximum": 887272,
                "type": "integer",
              },
              "token0ClassKey": {
                "description": "Object representing the chain identifier of token class.",
                "properties": {
                  "additionalKey": {
                    "not": {
                      "type": "null",
                    },
                  },
                  "category": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "collection": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "type": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "collection",
                  "category",
                  "type",
                  "additionalKey",
                ],
                "type": "object",
              },
              "token1ClassKey": {
                "description": "Object representing the chain identifier of token class.",
                "properties": {
                  "additionalKey": {
                    "not": {
                      "type": "null",
                    },
                  },
                  "category": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "collection": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "type": {
                    "minLength": 1,
                    "type": "string",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "collection",
                  "category",
                  "type",
                  "additionalKey",
                ],
                "type": "object",
              },
              "tokensOwed0": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "tokensOwed1": {
                "description": "Number provided as a string.",
                "type": "string",
              },
            },
            "required": [
              "poolHash",
              "tickUpper",
              "tickLower",
              "positionId",
              "liquidity",
              "feeGrowthInside0Last",
              "feeGrowthInside1Last",
              "tokensOwed0",
              "tokensOwed1",
              "token0ClassKey",
              "token1ClassKey",
              "fee",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "amount": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "owner": {
            "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
            "minLength": 1,
            "type": "string",
          },
          "positionId": {
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "tickLower": {
            "minLength": 1,
            "minimum": -887272,
            "type": "string",
          },
          "tickUpper": {
            "maximum": 887272,
            "minLength": 1,
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "tickUpper",
          "tickLower",
          "token0",
          "token1",
          "fee",
          "amount",
          "owner",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetRemoveLiquidityEstimation",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "amount0": {
                "type": "string",
              },
              "amount1": {
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "amount0",
              "amount1",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetSlot0",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "grossPoolLiquidity": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "liquidity": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "sqrtPrice": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "tick": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "sqrtPrice",
              "tick",
              "liquidity",
              "grossPoolLiquidity",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "poolHash": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "tick": {
            "maximum": 887272,
            "minimum": -887272,
            "type": "integer",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "poolHash",
          "tick",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetTickData",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "feeGrowthOutside0": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "feeGrowthOutside1": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "initialised": {
                "type": "boolean",
              },
              "liquidityGross": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "liquidityNet": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "poolHash": {
                "type": "string",
              },
              "tick": {
                "maximum": 887272,
                "minimum": -887272,
                "type": "integer",
              },
            },
            "required": [
              "poolHash",
              "tick",
              "liquidityGross",
              "initialised",
              "liquidityNet",
              "feeGrowthOutside0",
              "feeGrowthOutside1",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "bookmark": {
            "type": "string",
          },
          "limit": {
            "maximum": 10,
            "minLength": 1,
            "minimum": 1,
            "type": "integer",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "user": {
            "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "user",
          "limit",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "GetUserPositions",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "nextBookMark": {
                "type": "string",
              },
              "positions": {
                "items": {},
                "minItems": 0,
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "positions",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Transaction is read only (evaluate). Allowed roles: EVALUATE.",
      "dtoSchema": {
        "properties": {
          "amount": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "zeroForOne": {
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
          "zeroForOne",
          "amount",
        ],
        "type": "object",
      },
      "isWrite": false,
      "methodName": "QuoteExactAmount",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "amount0": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "amount1": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "currentSqrtPrice": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "newSqrtPrice": {
                "description": "Number provided as a string.",
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "amount0",
              "amount1",
              "currentSqrtPrice",
              "newSqrtPrice",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "amount": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "amount0Min": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "amount1Min": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "positionId": {
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "tickLower": {
            "minLength": 1,
            "minimum": -887272,
            "type": "string",
          },
          "tickUpper": {
            "maximum": 887272,
            "minLength": 1,
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "tickUpper",
          "tickLower",
          "token0",
          "token1",
          "fee",
          "amount",
          "amount0Min",
          "amount1Min",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "RemoveLiquidity",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "amounts": {
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
              "poolAlias": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "poolFee": {
                "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
                "enum": [
                  10000,
                  3000,
                  500,
                ],
                "type": "number",
              },
              "poolHash": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
              "userAddress": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "userBalanceDelta": {
                "properties": {
                  "prefix": {
                    "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signature": {
                    "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerAddress": {
                    "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signerPublicKey": {
                    "description": "Public key of the user who signed the DTO.",
                    "minLength": 1,
                    "type": "string",
                  },
                  "signing": {
                    "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                    "enum": [
                      "ETH",
                      "TON",
                    ],
                    "type": "string",
                  },
                  "token0Balance": {
                    "minLength": 1,
                    "properties": {
                      "additionalKey": {
                        "not": {
                          "type": "null",
                        },
                      },
                      "category": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "collection": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "inUseHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "instanceIds": {},
                      "lockedHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "owner": {
                        "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                        "type": "string",
                      },
                      "quantity": {
                        "description": "Number provided as a string.",
                        "type": "string",
                      },
                      "type": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "vestingPeriodStart": {
                        "description": "vestingPeriodStart timestamp. For Vesting Locks, this specifies the beginning of the vesting period.",
                        "minimum": 0,
                        "type": "number",
                      },
                    },
                    "required": [
                      "owner",
                      "collection",
                      "category",
                      "type",
                      "additionalKey",
                      "quantity",
                    ],
                    "type": "object",
                  },
                  "token1Balance": {
                    "minLength": 1,
                    "properties": {
                      "additionalKey": {
                        "not": {
                          "type": "null",
                        },
                      },
                      "category": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "collection": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "inUseHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "instanceIds": {},
                      "lockedHolds": {
                        "items": {
                          "properties": {
                            "created": {
                              "exclusiveMinimum": 0,
                              "type": "number",
                            },
                            "createdBy": {
                              "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                              "type": "string",
                            },
                            "expires": {
                              "minimum": 0,
                              "type": "number",
                            },
                            "instanceId": {
                              "description": "Number provided as a string.",
                              "minLength": 1,
                              "type": "string",
                            },
                            "lockAuthority": {
                              "description": "User who will be able to unlock token. If the value is missing, then token owner and lock creator can unlock in all cases token authority can unlock token.",
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                            "quantity": {
                              "description": "Number provided as a string.",
                              "type": "string",
                            },
                            "vestingPeriodStart": {
                              "minimum": 0,
                              "type": "number",
                            },
                          },
                          "required": [
                            "createdBy",
                            "instanceId",
                            "quantity",
                            "created",
                            "expires",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                      },
                      "owner": {
                        "description": "Allowed value is string following the format of 'client|<user-id>', or 'eth|<checksumed-eth-addr>', or valid system-level username.",
                        "type": "string",
                      },
                      "quantity": {
                        "description": "Number provided as a string.",
                        "type": "string",
                      },
                      "type": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "vestingPeriodStart": {
                        "description": "vestingPeriodStart timestamp. For Vesting Locks, this specifies the beginning of the vesting period.",
                        "minimum": 0,
                        "type": "number",
                      },
                    },
                    "required": [
                      "owner",
                      "collection",
                      "category",
                      "type",
                      "additionalKey",
                      "quantity",
                    ],
                    "type": "object",
                  },
                  "uniqueKey": {
                    "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                    "minLength": 1,
                    "type": "string",
                  },
                },
                "required": [
                  "token0Balance",
                  "token1Balance",
                ],
                "type": "object",
              },
            },
            "required": [
              "userBalanceDelta",
              "amounts",
              "poolHash",
              "poolAlias",
              "poolFee",
              "userAddress",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT. Allowed orgs: CuratorOrg.",
      "dtoSchema": {
        "properties": {
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "protocolFee": {
            "type": "number",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "protocolFee",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "SetProtocolFee",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "protocolFee": {
                "type": "number",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "protocolFee",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "amount": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "amountInMaximum": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "amountOutMinimum": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "sqrtPriceLimit": {
            "description": "Number provided as a string.",
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
          "zeroForOne": {
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "token0",
          "token1",
          "fee",
          "zeroForOne",
          "sqrtPriceLimit",
          "amount",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "Swap",
      "responseSchema": {
        "properties": {
          "Data": {
            "properties": {
              "amount0": {
                "minLength": 1,
                "type": "string",
              },
              "amount1": {
                "minLength": 1,
                "type": "string",
              },
              "poolAlias": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "poolFee": {
                "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
                "enum": [
                  10000,
                  3000,
                  500,
                ],
                "type": "number",
              },
              "poolHash": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "timeStamp": {
                "minLength": 1,
                "type": "string",
              },
              "token0": {
                "minLength": 1,
                "type": "string",
              },
              "token0ImageUrl": {
                "minLength": 1,
                "type": "string",
              },
              "token1": {
                "minLength": 1,
                "type": "string",
              },
              "token1ImageUrl": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
              "userAddress": {
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "token0",
              "token0ImageUrl",
              "token1",
              "token1ImageUrl",
              "amount0",
              "amount1",
              "userAddress",
              "timeStamp",
              "poolHash",
              "poolAlias",
              "poolFee",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
    {
      "description": " Allowed roles: SUBMIT.",
      "dtoSchema": {
        "properties": {
          "fee": {
            "description": "10000 - FEE_1_PERCENT, 3000 - FEE_0_3_PERCENT, 500 - FEE_0_05_PERCENT",
            "enum": [
              10000,
              3000,
              500,
            ],
            "type": "number",
          },
          "positionId": {
            "minLength": 1,
            "type": "string",
          },
          "prefix": {
            "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signature": {
            "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
            "minLength": 1,
            "type": "string",
          },
          "signerAddress": {
            "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
            "minLength": 1,
            "type": "string",
          },
          "signerPublicKey": {
            "description": "Public key of the user who signed the DTO.",
            "minLength": 1,
            "type": "string",
          },
          "signing": {
            "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
            "enum": [
              "ETH",
              "TON",
            ],
            "type": "string",
          },
          "toAddress": {
            "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
            "minLength": 1,
            "type": "string",
          },
          "token0": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "token1": {
            "description": "Object representing the chain identifier of token class.",
            "minLength": 1,
            "properties": {
              "additionalKey": {
                "not": {
                  "type": "null",
                },
              },
              "category": {
                "minLength": 1,
                "type": "string",
              },
              "collection": {
                "minLength": 1,
                "type": "string",
              },
              "prefix": {
                "description": "Prefix for Metamask transaction signatures. Necessary to format payloads correctly to recover publicKey from web3 signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signature": {
                "description": "Signature of the DTO signed with caller's private key to be verified with user's public key saved on chain. The 'signature' field is optional for DTO, but is required for a transaction to be executed on chain. 
Please consult [GalaChain SDK documentation](https://github.com/GalaChain/sdk/blob/main/docs/authorization.md#signature-based-authorization) on how to create signatures.",
                "minLength": 1,
                "type": "string",
              },
              "signerAddress": {
                "description": "Address of the user who signed the DTO. Typically Ethereum or TON address.",
                "minLength": 1,
                "type": "string",
              },
              "signerPublicKey": {
                "description": "Public key of the user who signed the DTO.",
                "minLength": 1,
                "type": "string",
              },
              "signing": {
                "description": "Signing scheme used for the signature. "ETH" for Ethereum, and "TON" for The Open Network are supported. Default: "ETH".",
                "enum": [
                  "ETH",
                  "TON",
                ],
                "type": "string",
              },
              "type": {
                "minLength": 1,
                "type": "string",
              },
              "uniqueKey": {
                "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
                "minLength": 1,
                "type": "string",
              },
            },
            "required": [
              "collection",
              "category",
              "type",
              "additionalKey",
            ],
            "type": "object",
          },
          "uniqueKey": {
            "description": "Unique key of the DTO. It is used to prevent double execution of the same transaction on chain. The key is saved on chain and checked before execution. If a DTO with already saved key is used in transaction, the transaction will fail with UniqueTransactionConflict error, which is mapped to HTTP 409 Conflict error. In case of the error, no changes are saved to chain state.
The key is generated by the caller and should be unique for each DTO. You can use \`nanoid\` library, UUID scheme, or any tool to generate unique string keys.",
            "minLength": 1,
            "type": "string",
          },
        },
        "required": [
          "toAddress",
          "token0",
          "token1",
          "fee",
          "positionId",
        ],
        "type": "object",
      },
      "isWrite": true,
      "methodName": "TransferDexPosition",
      "responseSchema": {
        "properties": {
          "Data": {
            "description": "Represents a position owned by a user in a decentralized exchange (DEX) pool.Each position is linked to a specific pool, defined by tick range mappings, and associated with a unique position ID.The position also includes ownership details and the pool's unique identifier.",
            "properties": {
              "owner": {
                "description": "Allowed value is a user alias ('client|<user-id>', or 'eth|<checksumed-eth-addr>', or 'ton|<chain:ton-address>', or valid system-level username), or valid Ethereum address.",
                "minLength": 1,
                "type": "string",
              },
              "poolHash": {
                "minLength": 1,
                "type": "string",
              },
              "tickRangeMap": {
                "description": "A tick range mapping that maps a tick range (eg. 10:20) to a unique position ID for this pool",
                "type": "object",
              },
            },
            "required": [
              "owner",
              "poolHash",
              "tickRangeMap",
            ],
            "type": "object",
          },
          "Message": {
            "type": "string",
          },
          "Status": {
            "description": "Indicates Error (0) or Success (1)",
            "enum": [
              0,
              1,
            ],
          },
        },
        "required": [
          "Status",
        ],
        "type": "object",
      },
    },
  ],
}
`;
